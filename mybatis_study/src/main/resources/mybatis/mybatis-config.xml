<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
        1、MyBatis可以使用 properties 来引入外部配置文件的内容；
        resource：引入类路径下的资源
        url：引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="application.properties"/>

    <!--2 settings 包含很多重要的配置项-->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>

    <!-- 3、typeAliases：别名处理器，可以为我们的Java类型起别名,别名不区分大小写-->
    <typeAliases>
        <!--
        方式1、typeAlias：为某个java类型起别名
            type：指定要起别名的类型全类名；默认别名就是类名小写；employee
            alias：指定新的别名
        -->
        <!--<typeAlias type="com.ireadygo.mybatis.bean.Employee" alias="emp"/>-->

        <!--方式2、 package：为某个包下的所有类批量起别名
                name：指定包名（为当前包及所有子包下的每一个类都起一个默认别名，（类名小写））-->
        <package name="com.ireadygo.mybatis.bean"/>

        <!--方式3、批量起别名的情况下（可能子包有相同名字的类），可以使用@Alias注解为某个类型指定新的别名-->
    </typeAliases>

    <!-- 4、environments：可以配置多种环境，default指定使用某种环境
        environment：配置一个具体的环境信息，必须有两个标签，
        transactionManager：事务管理器，
            type：事务管理器类型，JDBC（JdbcTransactionFactory）| MANAGED（ManagedTransactionFactory）
            自定义事务管理器，实现TransactionFactory接口，type指定为全类名
        dataSource：数据源，
        type：数据源类型，  UNPOOLED（UnpooledDataSourceFactory）
                            |POOLED（PooledDataSourceFactory）
                            |JNDI（JndiDataSourceFactory）
        自定义数据源：实现DataSourceFactory接口，type是全类名
    -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--  5、databaseIdProvider：支持多数据厂商
        type="DB_VENDOR"，VendorDatabaseIdProvider
            作用是得到数据库厂商的标识，MyBatis就能根据数据库厂商标识执行不同的sql
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据厂商起别名，注意大小写 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>

    <!--将我们写好的sql映射文件(EmployeeMapper.xml)一定要注册到全局配置文件中(mybatis-config.xml)-->
    <!-- 6、mappers：将sql映射注册到全局配置文件中，-->
    <mappers>
        <!--
            mapper：注册一个sql映射
                resource：引用类路径下的sql映射文件
                url：引用网络路径或者磁盘路径下的sql映射文件

                注册接口
                class：引用（注册）接口
                    1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下
                    2、没有sql映射文件，在接口上使用注解
                    推荐：
                        重要、复杂的Dao接口我们使用sql映射文件方式
                        不重要、简单的Dao接口为了开发快速可以使用注解；
        -->

        <mapper resource="mybatis/mapper/EmployeeMapper.xml"/>
        <!--<mapper class="com.ireadygo.mybatis.mapper.EmployeeMapper"/>-->
        <!--<mapper class="com.ireadygo.mybatis.mapper.EmployeeMapperAnnotation"/>-->

        <!-- 批量注册，使用xml映射文件会报错-->
        <!--<package name="com.ireadygo.mybatis.mapper"/>-->
    </mappers>

</configuration>